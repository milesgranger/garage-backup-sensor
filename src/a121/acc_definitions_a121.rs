/* automatically generated by rust-bindgen 0.69.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ACC_CAL_RESULT_DATA_SIZE: u32 = 192;
pub const ACC_MAX_NUM_SUBSWEEPS: u32 = 4;
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_long;
pub type __uint64_t = cty::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = cty::c_long;
pub type __u_quad_t = cty::c_ulong;
pub type __intmax_t = cty::c_long;
pub type __uintmax_t = cty::c_ulong;
pub type __dev_t = cty::c_ulong;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = cty::c_ulong;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_ulong;
pub type __off_t = cty::c_long;
pub type __off64_t = cty::c_long;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = cty::c_ulong;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __suseconds64_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = cty::c_long;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = cty::c_ulong;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = cty::c_ulong;
pub type __fsword_t = cty::c_long;
pub type __ssize_t = cty::c_long;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_long;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_long;
pub type int_fast32_t = cty::c_long;
pub type int_fast64_t = cty::c_long;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_ulong;
pub type uint_fast32_t = cty::c_ulong;
pub type uint_fast64_t = cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = " The result from a completed calibration."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acc_cal_result_t {
    pub data: [u8; 192usize],
}
#[test]
fn bindgen_test_layout_acc_cal_result_t() {
    const UNINIT: ::core::mem::MaybeUninit<acc_cal_result_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<acc_cal_result_t>(),
        192usize,
        concat!("Size of: ", stringify!(acc_cal_result_t))
    );
    assert_eq!(
        ::core::mem::align_of::<acc_cal_result_t>(),
        1usize,
        concat!("Alignment of ", stringify!(acc_cal_result_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(acc_cal_result_t),
            "::",
            stringify!(data)
        )
    );
}
#[doc = " Information about calibration."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acc_cal_info_t {
    pub temperature: i16,
}
#[test]
fn bindgen_test_layout_acc_cal_info_t() {
    const UNINIT: ::core::mem::MaybeUninit<acc_cal_info_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<acc_cal_info_t>(),
        2usize,
        concat!("Size of: ", stringify!(acc_cal_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<acc_cal_info_t>(),
        2usize,
        concat!("Alignment of ", stringify!(acc_cal_info_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(acc_cal_info_t),
            "::",
            stringify!(temperature)
        )
    );
}
#[doc = " The profile with the highest depth resolution and lowest radar loop gain."]
pub const acc_config_profile_t_ACC_CONFIG_PROFILE_1: acc_config_profile_t = 1;
#[doc = " The profile with the highest depth resolution and lowest radar loop gain."]
pub const acc_config_profile_t_ACC_CONFIG_PROFILE_2: acc_config_profile_t = 2;
#[doc = " The profile with the highest depth resolution and lowest radar loop gain."]
pub const acc_config_profile_t_ACC_CONFIG_PROFILE_3: acc_config_profile_t = 3;
#[doc = " The profile with the highest depth resolution and lowest radar loop gain."]
pub const acc_config_profile_t_ACC_CONFIG_PROFILE_4: acc_config_profile_t = 4;
#[doc = " The profile with the lowest depth resolution and highest radar loop gain."]
pub const acc_config_profile_t_ACC_CONFIG_PROFILE_5: acc_config_profile_t = 5;
#[doc = " @brief Profile\n\n Each profile consists of a number of settings for the sensor that configures the RX and TX paths.\n Lower profiles have higher depth resolution while higher profiles have higher radar loop gain."]
pub type acc_config_profile_t = cty::c_uint;
#[doc = " The deepest state where as much of the sensor hardware is shut down."]
pub const acc_config_idle_state_t_ACC_CONFIG_IDLE_STATE_DEEP_SLEEP: acc_config_idle_state_t = 0;
#[doc = " The deepest state where as much of the sensor hardware is shut down."]
pub const acc_config_idle_state_t_ACC_CONFIG_IDLE_STATE_SLEEP: acc_config_idle_state_t = 1;
#[doc = " The shallowest state where most of the sensor hardware is kept on."]
pub const acc_config_idle_state_t_ACC_CONFIG_IDLE_STATE_READY: acc_config_idle_state_t = 2;
#[doc = " @brief Idle state\n\n Idle state 'DEEP_SLEEP' is the deepest state where as much of the sensor hardware as\n possible is shut down and idle state 'READY' is the shallowest state where most of the sensor\n hardware is kept on.\n\n DEEP_SLEEP is the slowest to transition from while READY is the fastest.\n"]
pub type acc_config_idle_state_t = cty::c_uint;
#[doc = " 19.5 MHz"]
pub const acc_config_prf_t_ACC_CONFIG_PRF_19_5_MHZ: acc_config_prf_t = 0;
#[doc = " 15.6 MHz"]
pub const acc_config_prf_t_ACC_CONFIG_PRF_15_6_MHZ: acc_config_prf_t = 1;
#[doc = " 13.0 MHz"]
pub const acc_config_prf_t_ACC_CONFIG_PRF_13_0_MHZ: acc_config_prf_t = 2;
#[doc = " 8.7 MHz"]
pub const acc_config_prf_t_ACC_CONFIG_PRF_8_7_MHZ: acc_config_prf_t = 3;
#[doc = " 6.5 MHz"]
pub const acc_config_prf_t_ACC_CONFIG_PRF_6_5_MHZ: acc_config_prf_t = 4;
#[doc = " 5.2 MHz"]
pub const acc_config_prf_t_ACC_CONFIG_PRF_5_2_MHZ: acc_config_prf_t = 5;
#[doc = " @brief Pulse Repetition Frequency\n\n Pulse Repetition Frequency, PRF, is the frequency at\n which pulses are sent out from the radar system. The\n measurement time is approximately proportional to the\n PRF. The higher the PRF, the shorter the measurement time.\n\n This parameter sets the Maximum Measurable Distance, MMD,\n that can be achieved. MMD is the maximum value for the end point,\n i.e.,the start point + (number of points * step length).\n For example, an MMD of 7.0 m means that the range cannot\n be set further out than 7.0 m.\n\n It also sets the Maximum Unambiguous Range, MUR, that can be achieved.\n MUR is the maximum distance at which an object can be located to guarantee\n that its reflection corresponds to the most recent transmitted pulse.\n Objects farther away than the MUR may fold into the measured range.\n For example, with a MUR of 11.5 m, an object at 13.5 m could become\n visible at 2 m.\n\n | PRF Setting              |      PRF |    MMD |    MUR |\n |-------------------------:|---------:|-------:|-------:|\n | ACC_CONFIG_PRF_19_5_MHZ* | 19.5 MHz |  3.1 m |  7.7 m |\n | ACC_CONFIG_PRF_15_6_MHZ  | 15.6 MHz |  5.1 m |  9.6 m |\n | ACC_CONFIG_PRF_13_0_MHZ  | 13.0 MHz |  7.0 m | 11.5 m |\n | ACC_CONFIG_PRF_8_7_MHZ   |  8.7 MHz | 12.7 m | 17.3 m |\n | ACC_CONFIG_PRF_6_5_MHZ   |  6.5 MHz | 18.5 m | 23.1 m |\n | ACC_CONFIG_PRF_5_2_MHZ   |  5.2 MHz | 24.3 m | 28.8 m |\n\n *19.5MHz is only available for profile 1."]
pub type acc_config_prf_t = cty::c_uint;
